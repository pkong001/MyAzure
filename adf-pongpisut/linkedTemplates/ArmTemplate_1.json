{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-pongpisut"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/P01Brick02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ETL Container",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.Condition1",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "full",
									"activities": [
										{
											"name": "FACT-bronze-to-silver_full",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "dummy full",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-Load-fact-bronze-to-silver",
												"baseParameters": {
													"table_name": {
														"value": "@pipeline().parameters.table_name",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "dummy full",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "dummy",
												"value": {
													"value": "@equals(1, 1)\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "fact",
									"activities": [
										{
											"name": "dummy fact",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "dummy",
												"value": {
													"value": "@equals(1, 1)\n",
													"type": "Expression"
												}
											}
										},
										{
											"name": "FACT-bronze-to-silver_fact",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "dummy fact",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-Load-fact-bronze-to-silver",
												"baseParameters": {
													"table_name": {
														"value": "@pipeline().parameters.table_name",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "dim",
									"activities": [
										{
											"name": "dummy dim",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "dummy",
												"value": {
													"value": "@equals(1, 1)\n",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Condition1": {
						"type": "string",
						"defaultValue": "fact"
					},
					"Condition2": {
						"type": "string",
						"defaultValue": "pnl"
					},
					"Condition3": {
						"type": "string",
						"defaultValue": "full"
					},
					"extract_criteria_dim": {
						"type": "string"
					},
					"extract_date_fix_dim": {
						"type": "string"
					},
					"dummy": {
						"type": "string"
					},
					"end_date_fact": {
						"type": "string"
					},
					"start_date_fact": {
						"type": "string"
					},
					"extract_criteria_fact": {
						"type": "string"
					},
					"extract_date_fix_fact": {
						"type": "string"
					},
					"mode": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"variables": {
					"dummy": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SHIRLink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTableDW01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SHIR_DW01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromOnPremise')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AddressTable",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT  [AddressID]\n      ,[AddressLine1]\n      ,[AddressLine2]\n      ,[City]\n      ,[StateProvince]\n      ,[CountryRegion]\n      ,[PostalCode]\n      ,[rowguid]\n      ,[ModifiedDate]\nFROM [SalesLT].[Address]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"maxConcurrentConnections": 2,
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "address_parquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFromOnPremiseAll')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FindTableName",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\n    [TABLE_SCHEMA],\n    [TABLE_NAME]\nFROM\n    information_schema.tables\nWHERE\n    [TABLE_TYPE] = 'BASE TABLE'\n\tAND [TABLE_SCHEMA] = 'SalesLT'\nORDER BY\n[TABLE_NAME]\n\n\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ParameterizeForQuery",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FindTableName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FindTableName').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyEachTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@{concat('SELECT * FROM [SalesLT].',item().TABLE_NAME)}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ParquetTables",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Bronze to Silver",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ParameterizeForQuery",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/pkongdan01@gmail.com/Bronze to Silver"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Silver To Gold",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "Bronze to Silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/pkongdan01@gmail.com/Silver to Gold"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DW01_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimCompany",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set DimCompany Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nCompanyCode\n,CompanyName\nFROM [dbo].[DimCompany]",
								"queryTimeout": "02:01:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableDW01",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetDW01",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('TableName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set DimCompany Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DimCustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TableName",
							"value": "DimCompany"
						}
					},
					{
						"name": "Set DimDistributionChannelName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DimCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TableName",
							"value": "DimDistributionChannel"
						}
					},
					{
						"name": "Set DimProfitCenterDAta Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "DimDistributionChannel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TableName",
							"value": "DimProfitCenterData"
						}
					},
					{
						"name": "DimDistributionChannel",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set DimDistributionChannelName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nDistributionChannelCode\n,DistributionChannelName\nFROM [dbo].[DimDistributionChannel]",
								"queryTimeout": "02:01:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableDW01",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetDW01",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('TableName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DimProfitCenterData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set DimProfitCenterDAta Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT *\nFROM [dbo].[DimProfitCenterData]",
								"queryTimeout": "02:01:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableDW01",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetDW01",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@variables('TableName')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set DimCustomer Name",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TableName",
							"value": "DimCustomer"
						}
					},
					{
						"name": "DimCustomer",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set DimCustomer Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nCustomerCode\n,CustomerName\nFROM [dbo].[DimCustomer]",
								"queryTimeout": "02:01:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTableDW01",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetDW01",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "@variables('TableName')"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"var1": {
						"type": "String"
					},
					"TableName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTableDW01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P01Brick01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ELT Container",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.Condition1",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "full",
									"activities": [
										{
											"name": "DIM-source-to-bronze_full",
											"description": "ELT",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "dummy full",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-ELT-dim-profit&loss-source-to-pre-tx-bronze",
												"baseParameters": {
													"extract_criteria": {
														"value": "@pipeline().parameters.extract_criteria_dim",
														"type": "Expression"
													},
													"extract_date_fix": {
														"value": "@pipeline().parameters.extract_date_fix_dim",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "dummy full",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "dummy",
												"value": {
													"value": "@equals(1, 1)",
													"type": "Expression"
												}
											}
										},
										{
											"name": "FACT-source-to-bronze_full",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "DIM-bronze-to-silver_full",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-ELT-fact-profit&loss-source-to-pre-tx-bronze",
												"baseParameters": {
													"start_date": {
														"value": "@pipeline().parameters.start_date_fact",
														"type": "Expression"
													},
													"end_date": {
														"value": "@pipeline().parameters.end_date_fact",
														"type": "Expression"
													},
													"extract_criteria": {
														"value": "@pipeline().parameters.extract_criteria_fact",
														"type": "Expression"
													},
													"extrace_date_fix": {
														"value": "@pipeline().parameters.extract_date_fix_fact",
														"type": "Expression"
													},
													"mode": {
														"value": "@pipeline().parameters.mode",
														"type": "Expression"
													},
													"table_name": {
														"value": "@pipeline().parameters.table_name",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "DIM-bronze-to-silver_full",
											"description": "ETL",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "DIM-source-to-bronze_full",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-Load-dim-bronze-to-silver"
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "fact",
									"activities": [
										{
											"name": "dummy fact",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "dummy",
												"value": {
													"value": "@equals(1, 1)\n",
													"type": "Expression"
												}
											}
										},
										{
											"name": "FACT-source-to-bronze_fact",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "dummy fact",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-ELT-fact-profit&loss-source-to-pre-tx-bronze",
												"baseParameters": {
													"start_date": {
														"value": "@pipeline().parameters.start_date_fact",
														"type": "Expression"
													},
													"end_date": {
														"value": "@pipeline().parameters.end_date_fact",
														"type": "Expression"
													},
													"extract_criteria": {
														"value": "@pipeline().parameters.extract_criteria_fact",
														"type": "Expression"
													},
													"extrace_date_fix": {
														"value": "@pipeline().parameters.extract_date_fix_fact",
														"type": "Expression"
													},
													"mode": {
														"value": "@pipeline().parameters.mode",
														"type": "Expression"
													},
													"table_name": {
														"value": "@pipeline().parameters.table_name",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								},
								{
									"value": "dim",
									"activities": [
										{
											"name": "dummy dim",
											"type": "SetVariable",
											"dependsOn": [],
											"policy": {
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"variableName": "dummy",
												"value": {
													"value": "@equals(1, 1)\n",
													"type": "Expression"
												}
											}
										},
										{
											"name": "DIM-source-to-bronze_dim",
											"description": "ELT",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "dummy dim",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-ELT-dim-profit&loss-source-to-pre-tx-bronze",
												"baseParameters": {
													"extract_criteria": {
														"value": "@pipeline().parameters.extract_criteria_dim",
														"type": "Expression"
													},
													"extract_date_fix": {
														"value": "@pipeline().parameters.extract_date_fix_dim",
														"type": "Expression"
													}
												}
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										},
										{
											"name": "DIM-bronze-to-silver_dim",
											"description": "ETL",
											"type": "DatabricksNotebook",
											"dependsOn": [
												{
													"activity": "DIM-source-to-bronze_dim",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-Load-dim-bronze-to-silver"
											},
											"linkedServiceName": {
												"referenceName": "AzureDatabricksP01",
												"type": "LinkedServiceReference"
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "dummy",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "dummy",
										"value": {
											"value": "@equals(1, 1)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "P01Brick02",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ELT Container",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "P01Brick02",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Condition1": {
									"value": "@pipeline().parameters.Condition1",
									"type": "Expression"
								},
								"Condition2": {
									"value": "@pipeline().parameters.Condition2",
									"type": "Expression"
								},
								"Condition3": {
									"value": "@pipeline().parameters.Condition3",
									"type": "Expression"
								},
								"extract_criteria_dim": {
									"value": "@pipeline().parameters.extract_criteria_dim",
									"type": "Expression"
								},
								"extract_date_fix_dim": {
									"value": "@pipeline().parameters.extract_date_fix_dim",
									"type": "Expression"
								},
								"dummy": {
									"value": "@equals(1,1)",
									"type": "Expression"
								},
								"end_date_fact": {
									"value": "@pipeline().parameters.end_date_fact",
									"type": "Expression"
								},
								"start_date_fact": {
									"value": "@pipeline().parameters.start_date_fact",
									"type": "Expression"
								},
								"extract_criteria_fact": {
									"value": "@pipeline().parameters.extract_criteria_fact",
									"type": "Expression"
								},
								"extract_date_fix_fact": {
									"value": "@pipeline().parameters.extract_date_fix_fact",
									"type": "Expression"
								},
								"mode": {
									"value": "@pipeline().parameters.mode",
									"type": "Expression"
								},
								"table_name": {
									"value": "@pipeline().parameters.table_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Condition1": {
						"type": "string",
						"defaultValue": "fact"
					},
					"Condition2": {
						"type": "string",
						"defaultValue": "pnl"
					},
					"Condition3": {
						"type": "string",
						"defaultValue": "full"
					},
					"extract_criteria_dim": {
						"type": "string"
					},
					"extract_date_fix_dim": {
						"type": "string"
					},
					"end_date_fact": {
						"type": "string"
					},
					"start_date_fact": {
						"type": "string"
					},
					"mode": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"extract_criteria_fact": {
						"type": "string"
					},
					"extract_date_fix_fact": {
						"type": "string"
					}
				},
				"variables": {
					"dummy": {
						"type": "Boolean",
						"defaultValue": true
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/P01Brick02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/P01Brick-LOOP')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "extract_date_fix_dim",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "extract_date_fix_dim",
							"value": {
								"value": "@pipeline().parameters.extract_date_fix_dim",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "extract_date_fix_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "extract_criteria_dim",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "extract_date_fix_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "extract_criteria_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "table_name",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "start_date_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "end_date_fact",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('LoopCount'),variables('TotalLoop'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "P01Brick01",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "VarControl01",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "P01Brick01",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"Condition1": {
												"value": "@pipeline().parameters.Condition1",
												"type": "Expression"
											},
											"Condition2": {
												"value": "@pipeline().parameters.Condition2",
												"type": "Expression"
											},
											"Condition3": {
												"value": "@pipeline().parameters.Condition3",
												"type": "Expression"
											},
											"extract_criteria_dim": {
												"value": "@json(activity('VarControl01').output.runOutput).extract_criteria_dim\r\n",
												"type": "Expression"
											},
											"extract_date_fix_dim": {
												"value": "@json(activity('VarControl01').output.runOutput).extract_date_fix_dim\n",
												"type": "Expression"
											},
											"end_date_fact": {
												"value": "@json(activity('VarControl01').output.runOutput).end_date_fact\n",
												"type": "Expression"
											},
											"start_date_fact": {
												"value": "@json(activity('VarControl01').output.runOutput).start_date_fact\n",
												"type": "Expression"
											},
											"mode": {
												"value": "@pipeline().parameters.mode",
												"type": "Expression"
											},
											"table_name": {
												"value": "@json(activity('VarControl01').output.runOutput).table_name_fact",
												"type": "Expression"
											},
											"extract_criteria_fact": {
												"value": "@json(activity('VarControl01').output.runOutput).extract_criteria_fact",
												"type": "Expression"
											},
											"extract_date_fix_fact": {
												"value": "@json(activity('VarControl01').output.runOutput).extract_date_fix_fact",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "VarControl01",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/pkongdan01@gmail.com/P01/_P1-VARIABLES-CONTROL",
										"baseParameters": {
											"extract_date_fix_dim": {
												"value": "@pipeline().parameters.extract_date_fix_dim",
												"type": "Expression"
											},
											"extract_criteria_dim": {
												"value": "@pipeline().parameters.extract_criteria_dim",
												"type": "Expression"
											},
											"extract_date_fix_fact": {
												"value": "@pipeline().parameters.extract_date_fix_fact",
												"type": "Expression"
											},
											"extract_criteria_fact": {
												"value": "@pipeline().parameters.extract_criteria_fact",
												"type": "Expression"
											},
											"start_date_fact": {
												"value": "@pipeline().parameters.start_date_fact",
												"type": "Expression"
											},
											"end_date_fact": {
												"value": "@pipeline().parameters.end_date_fact",
												"type": "Expression"
											},
											"table_name": {
												"value": "@pipeline().parameters.table_name",
												"type": "Expression"
											},
											"LoopCount": {
												"value": "@string(variables('LoopCount'))",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricksP01",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Increment Loop Count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "P01Brick01",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "LoopCount",
										"value": {
											"value": "@add(variables('TempCount'),1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Increment Temp Count",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Increment Loop Count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TempCount",
										"value": {
											"value": "@variables('LoopCount')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Total Loop",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "P01Brick01",
											"dependencyConditions": [
												"Succeeded",
												"Skipped"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "TotalLoop",
										"value": {
											"value": "@json(activity('VarControl01').output.runOutput).months_diff",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "extract_criteria_dim",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "extract_criteria_dim",
							"value": {
								"value": "@pipeline().parameters.extract_criteria_dim",
								"type": "Expression"
							}
						}
					},
					{
						"name": "extract_date_fix_fact",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "extract_date_fix_fact",
							"value": {
								"value": "@pipeline().parameters.extract_date_fix_fact",
								"type": "Expression"
							}
						}
					},
					{
						"name": "extract_criteria_fact",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "extract_criteria_fact",
							"value": {
								"value": "@pipeline().parameters.extract_criteria_fact",
								"type": "Expression"
							}
						}
					},
					{
						"name": "table_name",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "table_name",
							"value": {
								"value": "@pipeline().parameters.table_name",
								"type": "Expression"
							}
						}
					},
					{
						"name": "start_date_fact",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "start_date_fact",
							"value": {
								"value": "@pipeline().parameters.start_date_fact",
								"type": "Expression"
							}
						}
					},
					{
						"name": "end_date_fact",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "end_date_fact",
							"value": {
								"value": "@pipeline().parameters.end_date_fact",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Condition1": {
						"type": "string",
						"defaultValue": "fact"
					},
					"Condition2": {
						"type": "string",
						"defaultValue": "pnl"
					},
					"Condition3": {
						"type": "string",
						"defaultValue": "full"
					},
					"extract_criteria_dim": {
						"type": "string",
						"defaultValue": "full"
					},
					"extract_date_fix_dim": {
						"type": "string",
						"defaultValue": "2026-01-01"
					},
					"dummy": {
						"type": "string",
						"defaultValue": "true"
					},
					"end_date_fact": {
						"type": "string",
						"defaultValue": "2024-12-31"
					},
					"start_date_fact": {
						"type": "string",
						"defaultValue": "2024-01-01"
					},
					"extract_criteria_fact": {
						"type": "string",
						"defaultValue": "2000-01-01"
					},
					"extract_date_fix_fact": {
						"type": "string",
						"defaultValue": "2026-01-01"
					},
					"mode": {
						"type": "string",
						"defaultValue": "dev"
					},
					"table_name": {
						"type": "string",
						"defaultValue": "Z1FI3MP01"
					}
				},
				"variables": {
					"dummy": {
						"type": "Boolean",
						"defaultValue": true
					},
					"extract_criteria_dim": {
						"type": "String"
					},
					"extract_date_fix_dim": {
						"type": "String"
					},
					"end_date_fact": {
						"type": "String"
					},
					"start_date_fact": {
						"type": "String"
					},
					"extract_criteria_fact": {
						"type": "String"
					},
					"extract_date_fix_fact": {
						"type": "String"
					},
					"table_name": {
						"type": "String"
					},
					"LoopCount": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TempCount": {
						"type": "Integer",
						"defaultValue": 1
					},
					"TotalLoop": {
						"type": "Integer",
						"defaultValue": 999
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/P01Brick01')]"
			]
		}
	]
}